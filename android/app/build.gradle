plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

def _applicationId = 'is.kibis.kibisis'
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')

// load local.properties
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newReader('UTF-8'))
}

// load key.properties
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def _compileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion', '34').toInteger()
def _minSdkVersion = localProperties.getProperty('flutter.minSdkVersion', '21').toInteger()
def _targetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion', '34').toInteger()
def _versionCode = localProperties.getProperty('flutter.versionCode', '1').toInteger()
def _versionName = localProperties.getProperty('flutter.versionName', '1.0')

// Log the versionCode and versionName to the console
println "Building with versionCode: ${_versionCode} and versionName: ${_versionName}"


android {
    namespace _applicationId
    compileSdk _compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        applicationId _applicationId
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName _versionName
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin') {
                details.useVersion kotlin_version
            }
        }
    }
}

dependencies {
    implementation 'com.google.android.gms:play-services-mlkit-barcode-scanning:18.3.0'
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        def requested = details.requested

        if (requested.group == 'androidx.core' && !requested.name.startsWith('core-splashscreen')) {
            details.useVersion kotlin_version
        }
        if (requested.group == 'org.jetbrains.kotlin') {
            details.useVersion kotlin_version
        }
    }
}
